{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
        "action": {
            "additionalProperties": false,
            "description": "An action is a type of element intended to describe temporal situations with                            semantic load, such as a certain activity happening in real life, such as                            crossing-zebra-cross, standing-still, playing-guitar. As such, actions are simply                            defined by their type, the frame intervals in which the action happens, and any                            additional action data (e.g. numbers, booleans, text as attributes of the actions)",
            "properties": {
                "action_data": {
                    "$ref": "#/definitions/action_data"
                },
                "action_data_pointers": {
                    "$ref": "#/definitions/element_data_pointers"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "frame_intervals": {
                    "item": {
                        "$ref": "#/definitions/frame_interval"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "ontology_uid": {
                    "type": "string"
                },
                "resource_uid": {
                    "$ref": "#/definitions/resource_uid"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "type": "object"
        },
        "action_data": {
            "additionalProperties": false,
            "description": "Additional data to describe attributes of the action.",
            "properties": {
                "boolean": {
                    "items": {
                        "$ref": "#/definitions/boolean"
                    },
                    "type": "array"
                },
                "num": {
                    "items": {
                        "$ref": "#/definitions/num"
                    },
                    "type": "array"
                },
                "text": {
                    "items": {
                        "$ref": "#/definitions/text"
                    },
                    "type": "array"
                },
                "vec": {
                    "items": {
                        "$ref": "#/definitions/vec"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "area_reference": {
            "additionalProperties": true,
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "reference_type": {
                    "type": "string"
                },
                "val": {
                    "items": {
                        "type": "number"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "attributes": {
            "additionalProperties": false,
            "description": "Attributes is the alias of element data that can be nested inside geometric                            object data.                            E.g. A certain bounding box object_data can have attributes related to its                            score, visibility, etc. These values can be nested inside the bounding box as attributes",
            "properties": {
                "boolean": {
                    "items": {
                        "$ref": "#/definitions/boolean"
                    },
                    "type": "array"
                },
                "num": {
                    "items": {
                        "$ref": "#/definitions/num"
                    },
                    "type": "array"
                },
                "text": {
                    "items": {
                        "$ref": "#/definitions/text"
                    },
                    "type": "array"
                },
                "vec": {
                    "items": {
                        "$ref": "#/definitions/vec"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "bbox": {
            "additionalProperties": true,
            "description": "A 2D bounding box is defined as a 4-dimensional vector [x, y, w, h], where [x, y] is the centre of the bounding box, and                            [w, h] represent the width (horizontal, x-coordinate dimension), and height (vertical, y-coordinate dimension), respectively.",
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "val": {
                    "items": {
                        "type": "number"
                    },
                    "maxItems": 4,
                    "minItems": 4,
                    "type": "array"
                }
            },
            "required": [
                "name",
                "val"
            ],
            "type": "object"
        },
        "binary": {
            "additionalProperties": true,
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "data_type": {
                    "type": "string"
                },
                "encoding": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "val": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "val",
                "encoding",
                "data_type"
            ],
            "type": "object"
        },
        "boolean": {
            "additionalProperties": true,
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "val": {
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "val"
            ],
            "type": "object"
        },
        "context": {
            "additionalProperties": false,
            "description": "A context is a type of element which defines any non spatial nor temporal annotation.                            Contexts can be used to add richness to the contextual information of a scene, including                             location, weather, application-related information",
            "properties": {
                "context_data": {
                    "$ref": "#/definitions/context_data"
                },
                "context_data_pointers": {
                    "$ref": "#/definitions/element_data_pointers"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "frame_intervals": {
                    "item": {
                        "$ref": "#/definitions/frame_interval"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "ontology_uid": {
                    "type": "string"
                },
                "resource_uid": {
                    "$ref": "#/definitions/resource_uid"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "type": "object"
        },
        "context_data": {
            "additionalProperties": false,
            "description": "Additional data to describe attributes of the context.",
            "properties": {
                "boolean": {
                    "items": {
                        "$ref": "#/definitions/boolean"
                    },
                    "type": "array"
                },
                "num": {
                    "items": {
                        "$ref": "#/definitions/num"
                    },
                    "type": "array"
                },
                "text": {
                    "items": {
                        "$ref": "#/definitions/text"
                    },
                    "type": "array"
                },
                "vec": {
                    "items": {
                        "$ref": "#/definitions/vec"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "coordinate_system": {
            "additionalProperties": true,
            "description": "A coordinate system is a 3D reference frame. Spatial information of objects and their                            can be defined with respect to coordinate systems.",
            "properties": {
                "children": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "parent": {
                    "type": "string"
                },
                "pose_wrt_parent": {
                    "$ref": "#/definitions/transform_data"
                },
                "type": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            },
            "required": [
                "type",
                "parent"
            ]
        },
        "coordinate_systems": {
            "additionalProperties": false,
            "patternProperties": {
                "^": {
                    "$ref": "#/definitions/coordinate_system"
                }
            },
            "type": "object"
        },
        "cuboid": {
            "additionalProperties": true,
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "val": {
                    "oneOf": [
                        {
                            "items": {
                                "type": "number"
                            },
                            "maxItems": 10,
                            "minItems": 9,
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "required": [
                "name",
                "val"
            ],
            "type": "object"
        },
        "element_data_pointer": {
            "description": "This item contains pointers to element_data of elements, indexed by name, and containing                            information about the element_data type (e.g. bounding box, cuboid) and the frame intervals                            in which this element_data exists within an element.                            As a consequence, these pointers can be used to explore the JSON file rapidly",
            "properties": {
                "attribute_pointers": {
                    "patternProperties": {
                        "^": {
                            "enum": [
                                "num",
                                "text",
                                "boolean",
                                "vec"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "frame_intervals": {
                    "item": {
                        "$ref": "#/definitions/frame_interval"
                    },
                    "type": "array"
                },
                "type": {
                    "enum": [
                        "bbox",
                        "rbbox",
                        "num",
                        "text",
                        "boolean",
                        "poly2d",
                        "poly3d",
                        "cuboid",
                        "image",
                        "mat",
                        "binary",
                        "point2d",
                        "point3d",
                        "vec",
                        "line_reference",
                        "area_reference",
                        "mesh"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "frame_intervals"
            ],
            "type": "object"
        },
        "element_data_pointers": {
            "additionalProperties": false,
            "patternProperties": {
                "^": {
                    "$ref": "#/definitions/element_data_pointer"
                }
            },
            "type": "object"
        },
        "event": {
            "additionalProperties": false,
            "description": "An event is an instantaneous situation that happens without a temporal interval.                             Events complement Actions providing a mechanism to specify triggers or to connect                            actions and objects with causality relations.",
            "properties": {
                "coordinate_system": {
                    "type": "string"
                },
                "event_data": {
                    "$ref": "#/definitions/event_data"
                },
                "event_data_pointers": {
                    "$ref": "#/definitions/element_data_pointers"
                },
                "frame_intervals": {
                    "item": {
                        "$ref": "#/definitions/frame_interval"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "ontology_uid": {
                    "type": "string"
                },
                "resource_uid": {
                    "$ref": "#/definitions/resource_uid"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "type": "object"
        },
        "event_data": {
            "additionalProperties": false,
            "description": "Additional data to describe attributes of the event.",
            "properties": {
                "boolean": {
                    "items": {
                        "$ref": "#/definitions/boolean"
                    },
                    "type": "array"
                },
                "num": {
                    "items": {
                        "$ref": "#/definitions/num"
                    },
                    "type": "array"
                },
                "text": {
                    "items": {
                        "$ref": "#/definitions/text"
                    },
                    "type": "array"
                },
                "vec": {
                    "items": {
                        "$ref": "#/definitions/vec"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "frame": {
            "additionalProperties": false,
            "description": "A frame is a container of dynamic information. It is indexed inside the OpenLabel file                            by its frame number. Time information about the frame is enclosed inside its                            \"frame_properties\\.                            A frame contains dynamic information of elements, such as \"objects\" or \"actions\", which                            are indexed by their UUID, so their static information can be found at the element level.",
            "properties": {
                "actions": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^(-?[0-9]+|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$": {
                            "additionalProperties": false,
                            "properties": {
                                "action_data": {
                                    "$ref": "#/definitions/action_data"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "contexts": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^(-?[0-9]+|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$": {
                            "additionalProperties": false,
                            "properties": {
                                "context_data": {
                                    "$ref": "#/definitions/context_data"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "events": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^(-?[0-9]+|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$": {
                            "additionalProperties": false,
                            "properties": {
                                "event_data": {
                                    "$ref": "#/definitions/event_data"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "frame_properties": {
                    "additionalProperties": true,
                    "description": "These frame_properties include frame-related information,                                   including: stream information, and timestamping.                                   -Timestamps: the field 'timestamp' can be used to declare a                                   master timestamp for all information within thi frame.                                   -Streams: can host information related to specific streams, such                                   as specific timestamps or instantaneous intrinsics.",
                    "properties": {
                        "streams": {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^": {
                                    "$ref": "#/definitions/stream"
                                }
                            },
                            "type": "object"
                        },
                        "timestamp": {
                            "type": "string"
                        },
                        "transforms": {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^": {
                                    "$ref": "#/definitions/transform"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "objects": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^(-?[0-9]+|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$": {
                            "additionalProperties": false,
                            "properties": {
                                "object_data": {
                                    "$ref": "#/definitions/object_data"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "relations": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^(-?[0-9]+|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$": {}
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "frame_interval": {
            "additionalProperties": false,
            "description": "A frame interval defines an starting and ending frame number, as a closed interval.",
            "properties": {
                "frame_end": {
                    "type": "integer"
                },
                "frame_start": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "image": {
            "additionalProperties": true,
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "encoding": {
                    "type": "string"
                },
                "mime_type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "val": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "val",
                "mime_type",
                "encoding"
            ],
            "type": "object"
        },
        "line_reference": {
            "additionalProperties": true,
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "reference_type": {
                    "type": "string"
                },
                "val": {
                    "items": {
                        "type": "number"
                    },
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "mat": {
            "additionalProperties": true,
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "channels": {
                    "type": "number"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "data_type": {
                    "type": "string"
                },
                "height": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "val": {
                    "item": {
                        "type": "number"
                    },
                    "type": "array"
                },
                "width": {
                    "type": "number"
                }
            },
            "required": [
                "name",
                "val",
                "channels",
                "width",
                "height",
                "data_type"
            ],
            "type": "object"
        },
        "mesh": {
            "description": "This is a special type of object data which encondes a point-line-area mesh.                            It is intended to represent 3D meshes, where points, lines and areas composing the mesh                            are interrelated, and can have their own properties",
            "properties": {
                "additionalProperties": true,
                "area_reference": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/area_reference"
                        }
                    },
                    "type": "object"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "line_reference": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/line_reference"
                        }
                    },
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "point3d": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/point3d"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "metadata": {
            "additionalProperties": true,
            "description": "This item contains information (metadata) about the annotation file itself                            including the schema_version, file_version, annotator, etc.",
            "properties": {
                "annotator": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "file_version": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schema_version": {
                    "enum": [
                        "0.2.0"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "schema_version"
            ],
            "type": "object"
        },
        "num": {
            "additionalProperties": true,
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "val": {
                    "type": "number"
                }
            },
            "required": [
                "name",
                "val"
            ],
            "type": "object"
        },
        "object": {
            "additionalProperties": false,
            "description": "An object is the main type of annotation element, and is designed to represent                            spatio-temporal entities, such as physical objects in the real world. Objects as                            any other element is identified by a UUID, and defined by its name, type, and other                           properties.                            All elements can have static and dynamic data. Objects are the only type of elements                            that can have geometric data, such as bounding boxes, cuboids, polylines, images, etc.",
            "properties": {
                "coordinate_system": {
                    "type": "string"
                },
                "frame_intervals": {
                    "item": {
                        "$ref": "#/definitions/frame_interval"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "object_data": {
                    "$ref": "#/definitions/object_data"
                },
                "object_data_pointers": {
                    "$ref": "#/definitions/element_data_pointers"
                },
                "ontology_uid": {
                    "type": "string"
                },
                "resource_uid": {
                    "$ref": "#/definitions/resource_uid"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "type": "object"
        },
        "object_data": {
            "additionalProperties": false,
            "description": "Additional data to describe attributes of the object.",
            "properties": {
                "area_reference": {
                    "items": {
                        "$ref": "#/definitions/area_reference"
                    },
                    "type": "array"
                },
                "bbox": {
                    "items": {
                        "$ref": "#/definitions/bbox"
                    },
                    "type": "array"
                },
                "binary": {
                    "items": {
                        "$ref": "#/definitions/binary"
                    },
                    "type": "array"
                },
                "boolean": {
                    "items": {
                        "$ref": "#/definitions/boolean"
                    },
                    "type": "array"
                },
                "cuboid": {
                    "items": {
                        "$ref": "#/definitions/cuboid"
                    },
                    "type": "array"
                },
                "image": {
                    "items": {
                        "$ref": "#/definitions/image"
                    },
                    "type": "array"
                },
                "line_reference": {
                    "items": {
                        "$ref": "#/definitions/line_reference"
                    },
                    "type": "array"
                },
                "mat": {
                    "items": {
                        "$ref": "#/definitions/mat"
                    },
                    "type": "array"
                },
                "mesh": {
                    "items": {
                        "$ref": "#/definitions/mesh"
                    },
                    "type": "array"
                },
                "num": {
                    "items": {
                        "$ref": "#/definitions/num"
                    },
                    "type": "array"
                },
                "point2d": {
                    "items": {
                        "$ref": "#/definitions/point2d"
                    },
                    "type": "array"
                },
                "point3d": {
                    "items": {
                        "$ref": "#/definitions/point3d"
                    },
                    "type": "array"
                },
                "poly2d": {
                    "items": {
                        "$ref": "#/definitions/poly2d"
                    },
                    "type": "array"
                },
                "poly3d": {
                    "items": {
                        "$ref": "#/definitions/poly3d"
                    },
                    "type": "array"
                },
                "rbbox": {
                    "items": {
                        "$ref": "#/definitions/rbbox"
                    },
                    "type": "array"
                },
                "text": {
                    "items": {
                        "$ref": "#/definitions/text"
                    },
                    "type": "array"
                },
                "vec": {
                    "items": {
                        "$ref": "#/definitions/vec"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ontologies": {
            "additionalProperties": false,
            "description": "This item contains identifiers of ontologies as key (identifier) value (URL or URI) pairs                            Ontology identifiers can then be used within elements to declare where the element type                            is defined",
            "patternProperties": {
                "^(-?[0-9]+|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "openlabel": {
            "additionalProperties": false,
            "description": "This is the root OpenLABEL element.",
            "properties": {
                "actions": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^(-?[0-9]+|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$": {
                            "$ref": "#/definitions/action"
                        }
                    },
                    "type": "object"
                },
                "contexts": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^(-?[0-9]+|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$": {
                            "$ref": "#/definitions/context"
                        }
                    },
                    "type": "object"
                },
                "coordinate_systems": {
                    "$ref": "#/definitions/coordinate_systems"
                },
                "events": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^(-?[0-9]+|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$": {
                            "$ref": "#/definitions/event"
                        }
                    },
                    "type": "object"
                },
                "frame_intervals": {
                    "item": {
                        "$ref": "#/definitions/frame_interval"
                    },
                    "type": "array"
                },
                "frames": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/frame"
                        }
                    },
                    "type": "object"
                },
                "metadata": {
                    "$ref": "#/definitions/metadata"
                },
                "objects": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^(-?[0-9]+|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$": {
                            "$ref": "#/definitions/object"
                        }
                    },
                    "type": "object"
                },
                "ontologies": {
                    "$ref": "#/definitions/ontologies"
                },
                "relations": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^(-?[0-9]+|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$": {
                            "$ref": "#/definitions/relation"
                        }
                    },
                    "type": "object"
                },
                "resources": {
                    "$ref": "#/definitions/resources"
                },
                "streams": {
                    "$ref": "#/definitions/streams"
                },
                "tags": {
                    "$ref": "#/definitions/tags"
                }
            },
            "required": [
                "metadata"
            ],
            "type": "object"
        },
        "point2d": {
            "additionalProperties": true,
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "val": {
                    "items": {
                        "type": "number"
                    },
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                }
            },
            "required": [
                "name",
                "val"
            ],
            "type": "object"
        },
        "point3d": {
            "additionalProperties": true,
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "val": {
                    "items": {
                        "type": "number"
                    },
                    "maxItems": 3,
                    "minItems": 3,
                    "type": "array"
                }
            },
            "required": [
                "name",
                "val"
            ],
            "type": "object"
        },
        "poly2d": {
            "additionalProperties": true,
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "closed": {
                    "type": "boolean"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "hierarchy": {
                    "items": {
                        "type": "integer"
                    },
                    "maxItems": 4,
                    "minItems": 4,
                    "type": "array"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "val": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "items": {
                                "type": "number"
                            },
                            "type": "array"
                        }
                    ]
                }
            },
            "required": [
                "name",
                "val",
                "mode",
                "closed"
            ],
            "type": "object"
        },
        "poly3d": {
            "additionalProperties": true,
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "closed": {
                    "type": "boolean"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "val": {
                    "items": {
                        "type": "number"
                    },
                    "type": "array"
                }
            },
            "required": [
                "name",
                "val",
                "closed"
            ],
            "type": "object"
        },
        "rbbox": {
            "additionalProperties": true,
            "description": "A 2D rotated bounding box is defined as a 5-dimensional vector [x, y, w, h, alpha], where [x, y] is the centre of the bounding box, and [w, h] represent the width (horizontal, x-coordinate dimension), and height (vertical, y-coordinate dimension), respectively. The angle alpha, in radians, represents the rotation of the rotated bounding box, and is defined as a right-handed rotation, i.e. positive from x to y axes, and with the origin of rotation placed at the center of the bounding box (i.e. [x, y]).",
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "val": {
                    "items": {
                        "type": "number"
                    },
                    "maxItems": 5,
                    "minItems": 5,
                    "type": "array"
                }
            },
            "required": [
                "name",
                "val"
            ],
            "type": "object"
        },
        "rdf_agent": {
            "description": "This item specifiy whether an RDF entry is a subject or an object in a RDF triple.",
            "properties": {
                "type": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "relation": {
            "additionalProperties": false,
            "description": "A relation is a type of element which connects two or more other elements, using                            RDF triples to structure the connection, with one or more subjects, a predicate and                            one or more objects ",
            "properties": {
                "frame_intervals": {
                    "item": {
                        "$ref": "#/definitions/frame_interval"
                    },
                    "type": "array"
                },
                "name": {
                    "type": "string"
                },
                "ontology_uid": {
                    "type": "string"
                },
                "rdf_objects": {
                    "item": {
                        "$ref": "#/definitions/rdf_agent"
                    },
                    "type": "array"
                },
                "rdf_subjects": {
                    "item": {
                        "$ref": "#/definitions/rdf_agent"
                    },
                    "type": "array"
                },
                "resource_uid": {
                    "$ref": "#/definitions/resource_uid"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "type",
                "rdf_objects",
                "rdf_subjects"
            ],
            "type": "object"
        },
        "resource_uid": {
            "description": "This is a unique identifier of an element in an external resource.",
            "patternProperties": {
                "^(-?[0-9]+|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "resources": {
            "additionalProperties": false,
            "description": "This item contains identifiers of external resources (files, URLs) that might be used to                            to link data of this annotation file with existing content.                            E.g. \"resources\": { \"0\": \"../resources/oxdr/opendrive_file.xml\"}                            declares a resource related to an OpenDrive file, with identifier \"0\"",
            "patternProperties": {
                "^(-?[0-9]+|[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "stream": {
            "additionalProperties": false,
            "description": "A stream describes the source of a data sequence, usually a sensor.",
            "properties": {
                "description": {
                    "type": "string"
                },
                "stream_properties": {
                    "$ref": "#/definitions/stream_properties"
                },
                "type": {
                    "enum": [
                        "camera",
                        "lidar",
                        "radar",
                        "gps_imu",
                        "other"
                    ],
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "stream_properties": {
            "additionalProperties": true,
            "oneOf": [
                {
                    "intrinsics_custom": {
                        "type": "object"
                    },
                    "intrinsics_fisheye": {
                        "additionalProperties": true,
                        "properties": {
                            "center_x_px": {
                                "type": [
                                    "number",
                                    "null"
                                ]
                            },
                            "center_y_px": {
                                "type": [
                                    "number",
                                    "null"
                                ]
                            },
                            "fov_deg": {
                                "type": [
                                    "number",
                                    "null"
                                ]
                            },
                            "height_px": {
                                "type": "integer"
                            },
                            "lens_coeffs": {
                                "items": {
                                    "type": "number"
                                },
                                "maxItems": 4,
                                "minItems": 4,
                                "type": "array"
                            },
                            "radius_x_px": {
                                "type": [
                                    "number",
                                    "null"
                                ]
                            },
                            "radius_y_px": {
                                "type": [
                                    "number",
                                    "null"
                                ]
                            },
                            "width_px": {
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "intrinsics_pinhole": {
                        "additionalProperties": true,
                        "properties": {
                            "camera_matrix": {
                                "comment": "This is a 3x4 camera matrix which projects                                         3D homogeneous points (4x1) from Sensor Coordinate                                        System (SCS) into the Image Coordinate System (ICS),                                       plane points (3x1).                                        This is the usual K matrix for camera projection, but                                       extended from 3x3 to 3x4, to enable its usage to project                                       4x1 homogeneous 3D points defined in the SCS into the ICS.                                       The SCS follows as well the usual convention x-to-right, y-down, z-forward:                                       x_ics = camera_matrix * X_scs",
                                "example": [
                                    720.0,
                                    0.0,
                                    320.0,
                                    0.0,
                                    0.0,
                                    720.0,
                                    240.0,
                                    0.0,
                                    0.0,
                                    0.0,
                                    1.0,
                                    0.0
                                ],
                                "items": {
                                    "type": "number"
                                },
                                "maxItems": 12,
                                "minItems": 12,
                                "type": "array"
                            },
                            "distortion_coeffs": {
                                "comment": "This is the array 1xN radial and tangential distortion                                        coefficients. See https://docs.opencv.org/4.2.0/d9/d0c/group__calib3d.html",
                                "example": [
                                    -0.4056964092079624,
                                    0.19116055332155032,
                                    0.0,
                                    0.0,
                                    -0.047033609773998064
                                ],
                                "items": {
                                    "type": "number"
                                },
                                "maxItems": 14,
                                "minItems": 5,
                                "type": "array"
                            },
                            "height_px": {
                                "type": "integer"
                            },
                            "width_px": {
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                }
            ],
            "sync": {
                "description": "This is the sync information for this Stream.                               If provided inside a certain frame, it can be used                               to specify timestamps in ISO8601 format,                               and a frame_stream of this stream.                               E.g. at openlabel's frame 34, for stream CAM_LEFT, the sync info                               contains timestamp=2020-04-09T04:57:57+00:00,                               and frame_stream=36 (which means that this CAM_LEFT is shifted                               2 frame with respect the openlabel's master frame indexes.                               If provided at stream level, it can be used to specify                               a frame shift, e.g. the shift of that stream wrt to the                               master openlabel frame count.                               E.g. if the shift is constant for all frames, it is more compact                               to define the frame_shift=2 at stream level.",
                "oneOf": [
                    {
                        "properties": {
                            "frame_stream": {
                                "type": "integer"
                            },
                            "timestamp": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "properties": {
                            "frame_shift": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "type": "object"
            },
            "type": "object"
        },
        "streams": {
            "additionalProperties": false,
            "patternProperties": {
                "^": {
                    "$ref": "#/definitions/stream"
                }
            },
            "type": "object"
        },
        "tag": {
            "additionalProperties": true,
            "properties": {
                "name": {
                    "type": "string"
                },
                "ont_uid": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "val": {
                    "$ref": "#/definitions/tag_data"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "type": "object"
        },
        "tag_data": {
            "oneOf": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "boolean": {
                            "items": {
                                "$ref": "#/definitions/boolean"
                            },
                            "type": "array"
                        },
                        "num": {
                            "items": {
                                "$ref": "#/definitions/num"
                            },
                            "type": "array"
                        },
                        "text": {
                            "items": {
                                "$ref": "#/definitions/text"
                            },
                            "type": "array"
                        },
                        "vec": {
                            "items": {
                                "$ref": "#/definitions/vec"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "string"
                }
            ]
        },
        "tags": {
            "additionalProperties": true,
            "description": "Tags are a special type of labels which might be attached to any type of content, such as                            images, data containers, folders, etc. In OpenLabel its main purpose is to allow adding                             metadata to scenario descriptions. They are grouped into 4 main categories:                            \"administrative\", \"odd\" (Operational Design Domain), \"behaviour\", and \"custom\".",
            "properties": {
                "administrative": {
                    "items": {
                        "$ref": "#/definitions/tag"
                    },
                    "type": "array"
                },
                "behaviour": {
                    "items": {
                        "$ref": "#/definitions/tag"
                    },
                    "type": "array"
                },
                "custom": {
                    "items": {
                        "$ref": "#/definitions/tag"
                    },
                    "type": "array"
                },
                "odd": {
                    "items": {
                        "$ref": "#/definitions/tag"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "text": {
            "additionalProperties": true,
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "val": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "val"
            ],
            "type": "object"
        },
        "transform": {
            "additionalProperties": true,
            "properties": {
                "dst": {
                    "type": "string"
                },
                "src": {
                    "type": "string"
                },
                "transform_src_to_dst": {
                    "$ref": "#/definitions/transform_data"
                }
            },
            "required": [
                "src",
                "dst",
                "transform_src_to_dst"
            ],
            "type": "object"
        },
        "transform_data": {
            "oneOf": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "matrix4x4": {
                            "description": "It is a 4x4 homogeneous matrix, to enable transform from                                    3D Cartersian Systems easily. Note that the pose_child_wrt_parent_4x4 is                                    the transform_child_to_parent_4x4:                                    X_child = (pose_child_wrt_parent_4x4)^-1 * X_parent                                    X_parent = transform_child_to_child_4x4 * X_child.",
                            "example": [
                                1.0,
                                0.0,
                                0.0,
                                10.0,
                                0.0,
                                1.0,
                                0.0,
                                5.0,
                                0.0,
                                0.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0,
                                1.0
                            ],
                            "items": {
                                "type": "number"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "matrix4x4"
                    ],
                    "type": "object"
                },
                {
                    "additionalProperties": false,
                    "description": "A transform can be defined with a quaternion (x, y, z, w) that encondes the                                    rotation of a coordinate system with respect to another,                                    and a translation (x, y, z)",
                    "properties": {
                        "quaternion": {
                            "items": {
                                "type": "number"
                            },
                            "maxItems": 4,
                            "minItems": 4,
                            "type": "array"
                        },
                        "translation": {
                            "items": {
                                "type": "number"
                            },
                            "maxItems": 3,
                            "minItems": 3,
                            "type": "array"
                        }
                    },
                    "required": [
                        "quaternion",
                        "translation"
                    ],
                    "type": "object"
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "euler_angles": {
                            "items": {
                                "type": "number"
                            },
                            "maxItems": 3,
                            "minItems": 3,
                            "type": "array"
                        },
                        "sequence": {
                            "type": "string"
                        },
                        "translation": {
                            "items": {
                                "type": "number"
                            },
                            "maxItems": 3,
                            "minItems": 3,
                            "type": "array"
                        }
                    },
                    "required": [
                        "euler_angles",
                        "translation"
                    ],
                    "type": "object"
                }
            ]
        },
        "vec": {
            "additionalProperties": true,
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/attributes"
                },
                "coordinate_system": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "val": {
                    "item": {
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                }
            },
            "required": [
                "name",
                "val"
            ],
            "type": "object"
        }
    },
    "properties": {
        "openlabel": {
            "$ref": "#/definitions/openlabel"
        }
    },
    "required": [
        "openlabel"
    ],
    "type": "object"
}